# This is a workflow to build and release for platforms defined in the export configuration file (export_template.cfg)

name: CI / CD

env:
  GODOT_VERSION: 4.4.1
# Whenever a tag push matching pattern "v*" then run the job
on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/**'
      - '.hooks/**'
      - '.pre-commit-config.yaml'
      - 'export_presets.cfg'
      - 'project.godot'

jobs:
  build-game:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Checkout LFS objects
        run: git lfs pull
      - name: build game
        id: build
        # Use latest version (see releases for all versions)
        uses: firebelley/godot-export@v5.2.1
        with:
          # Defining all the required inputs
          godot_executable_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_VERSION }}-stable/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
          relative_project_path: ./src
          use_preset_export_path: true
          archive_output: true

      - name: show build directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Build: ${{ steps.build.outputs.build_directory }}
          FOLDER_PATH="${{ steps.build.outputs.build_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi

      - name: show archive directory
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo Archive: ${{ steps.build.outputs.archive_directory }}
          FOLDER_PATH="${{ steps.build.outputs.archive_directory }}"
          if [ -d "$FOLDER_PATH" ]; then
            ls -R "$FOLDER_PATH"
          else
            ls -R .
          fi
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: build-exports
          path: ${{ steps.build.outputs.archive_directory }}/**/windows.zip
          retention-days: 1
          compression-level: 0
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          name: build-exports
          path: ${{ steps.build.outputs.archive_directory }}/**/linux_release.zip
          retention-days: 1
          compression-level: 0
      - name: create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          tag: ${{ github.ref_name }}
          artifacts: |
            ${{ steps.build.outputs.archive_directory }}/**/*.zip

      - name: Deploy to itch.io
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          ./get_butler.sh
          BUTLER_API_KEY=${{ secrets.BUTLER_API_KEY }} ./butler --verbose push ${{ steps.build.outputs.build_directory }}/web_release ${{ vars.ITCHIO_USERNAME }}/${{ vars.ITCHIO_GAME }}:web

      - name: Send Discord notification
        if: startsWith(github.ref, 'refs/tags/')
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_RELEASE_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'SpiritKeeper ${{ github.ref_name }} has been released to : https://${{ vars.ITCHIO_USERNAME }}.itch.io/${{ vars.ITCHIO_GAME }} Password: ${{ secrets.ITCHIO_PAGE_PASS }}'
